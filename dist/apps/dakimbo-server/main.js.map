{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./apps/dakimbo-server/src/config.ts","webpack:///./apps/dakimbo-server/src/controllers/authController.ts","webpack:///./apps/dakimbo-server/src/controllers/dataController.ts","webpack:///./apps/dakimbo-server/src/controllers/metricsController.ts","webpack:///./apps/dakimbo-server/src/controllers/userController.ts","webpack:///./apps/dakimbo-server/src/database/database.ts","webpack:///./apps/dakimbo-server/src/main.ts","webpack:///./apps/dakimbo-server/src/middlewares/checkJwt.ts","webpack:///./apps/dakimbo-server/src/middlewares/checkRole.ts","webpack:///./apps/dakimbo-server/src/routes/auth.ts","webpack:///./apps/dakimbo-server/src/routes/data.ts","webpack:///./apps/dakimbo-server/src/routes/index.ts","webpack:///./apps/dakimbo-server/src/routes/metrics.ts","webpack:///./apps/dakimbo-server/src/routes/user.ts","webpack:///./apps/dakimbo-server/src/utilities/logStamp.ts","webpack:///./libs/data/src/index.ts","webpack:///./libs/data/src/lib/entities/_entity-map.ts","webpack:///./libs/data/src/lib/entities/auth/user.ts","webpack:///./libs/data/src/lib/entities/base.ts","webpack:///./libs/data/src/lib/services/data/_delete.ts","webpack:///./libs/data/src/lib/services/data/_read.ts","webpack:///./libs/data/src/lib/services/data/_save.ts","webpack:///./libs/data/src/lib/services/data/data-service.module.ts","webpack:///./libs/data/src/lib/services/data/data.service.ts","webpack:///./libs/data/src/lib/services/data/interceptors/GenericModelHttpParams.ts","webpack:///./libs/data/src/lib/services/data/interceptors/header.interceptor.ts","webpack:///./libs/data/src/lib/services/data/interceptors/loading.interceptor.ts","webpack:///external \"@angular/common\"","webpack:///external \"@angular/common/http\"","webpack:///external \"@angular/core\"","webpack:///external \"bcryptjs\"","webpack:///external \"body-parser\"","webpack:///external \"class-validator\"","webpack:///external \"compression\"","webpack:///external \"cors\"","webpack:///external \"dotenv\"","webpack:///external \"express\"","webpack:///external \"helmet\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"reflect-metadata\"","webpack:///external \"rxjs\"","webpack:///external \"rxjs/operators\"","webpack:///external \"tslib\"","webpack:///external \"typeorm\""],"names":[],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { entityMap } from '@dakimbo/data';\r\n\r\nconst isProd = process.env.IS_PROD === 'true';\r\nconst pathToEntities = isProd ? './database/entities/**/*.js' : './database/entities/**/*.ts';\r\nconst pathToMigrations = isProd ? './database/migrations/**/*.js' : './database/migrations/**/*.ts';\r\n\r\nexport default {\r\n\tisProd: isProd,\r\n\r\n\thttpsOpts: {\r\n\t\t// Server SSL private key and certificate\r\n\t\t// key: fs.readFileSync(__dirname + '/security/dev-cert.key'),\r\n\t\t// cert: fs.readFileSync(__dirname + '/security/dev-cert.pem'),\r\n\t\t// issuer/CA certificate against which the client certificate will be\r\n\t\t// validated. A certificate that is not signed by a provided CA will be\r\n\t\t// rejected at the protocol layer.\r\n\t\t// ca: fs.readFileSync(__dirname + '/config/certs/ca-cert.pem'),\r\n\t\t// request a certificate, but don't necessarily reject connections from\r\n\t\t// clients providing an untrusted or no certificate. This lets us protect only\r\n\t\t// certain routes, or send a helpful error message to unauthenticated clients.\r\n\t\t// requestCert: true,\r\n\t\t// rejectUnauthorized: true,\r\n\t},\r\n\r\n\tdbOptions: {\r\n\t\ttype: process.env.DB_TYPE,\r\n\t\thost: process.env.DB_HOST,\r\n\t\tport: process.env.DB_PORT,\r\n\t\tusername: process.env.DB_USER,\r\n\t\tpassword: process.env.DB_PASSWORD,\r\n\t\tdatabase: process.env.DB_DATABASE || 'sof-server',\r\n\t\tsynchronize: true,\r\n\t\tlogging: isProd ? false : false,\r\n\t\tentities: Object.values(entityMap)\r\n\t\t// entities: [path.join(__dirname, pathToEntities)],\r\n\t\t// migrations: [path.join(__dirname, pathToMigrations)],\r\n\t\t// migrationsDir: 'migration'\r\n\t},\r\n\r\n\tjwtSecret: process.env.JWT_SECRET || 'CHANGE_ME'\r\n};\r\n","import { User } from '@dakimbo/data';\r\nimport { validate } from 'class-validator';\r\nimport { Request, Response } from 'express';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { getRepository } from 'typeorm';\r\n\r\nimport config from '../config';\r\nimport UserController from './userController';\r\n\r\nclass AuthController {\r\n\tstatic login = async (req: Request, res: Response) => {\r\n\t\t//Check if username and password are set\r\n\t\tlet { username, password } = req.body;\r\n\t\tif (!(username && password)) {\r\n\t\t\tres.status(400).send();\r\n\t\t\tconsole.log(`LOGIN: Username or Password not found; failed to log in!`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//Get user from database\r\n\t\tconst userRepository = getRepository(User);\r\n\t\tlet user: User;\r\n\t\ttry {\r\n\t\t\tuser = await userRepository.findOneOrFail({ where: { username } });\r\n\t\t} catch (error) {\r\n\t\t\tres.status(401).send();\r\n\t\t\tconsole.log(`LOGIN: User ${username} not found; failed to log in!`);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//Check if encrypted password match\r\n\t\tif (!UserController.checkIfUnencryptedPasswordIsValid(password, user)) {\r\n\t\t\tres.status(401).send();\r\n\t\t\tconsole.log(`LOGIN: User ${user.username} wrong password; failed to log in!`);\r\n\r\n\t\t\tuser.numFailedLogin++;\r\n\t\t\tawait userRepository.save(user); // increment num failed login counter\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//Sign JWT, valid for 1 hour\r\n\t\tconst token = jwt.sign({ userId: user.id, username: user.username }, config.jwtSecret, {\r\n\t\t\texpiresIn: '1h'\r\n\t\t});\r\n\r\n\t\t// Delete user pass\r\n\t\tdelete user.password;\r\n\r\n\t\tconsole.log(`LOGIN: User ${user.username} successfully logged in!`);\r\n\t\tuser.numSuccessfulLogin++;\r\n\t\tuserRepository.save(user); // increment num successful login counter\r\n\r\n\t\t//Send the jwt in the response\r\n\t\tres.send(Object.assign({ jwt: token }, user));\r\n\t};\r\n\r\n\tstatic changePassword = async (req: Request, res: Response) => {\r\n\t\t//Get ID from JWT\r\n\t\tconst id = res.locals.jwtPayload.userId;\r\n\r\n\t\t//Get parameters from the body\r\n\t\tconst { oldPassword, newPassword } = req.body;\r\n\t\tif (!(oldPassword && newPassword)) {\r\n\t\t\tres.status(400).send();\r\n\t\t}\r\n\r\n\t\t//Get user from the database\r\n\t\tconst userRepository = getRepository(User);\r\n\t\tlet user: User;\r\n\t\ttry {\r\n\t\t\tuser = await userRepository.findOneOrFail(id);\r\n\t\t} catch (id) {\r\n\t\t\tres.status(401).send();\r\n\t\t}\r\n\r\n\t\t//Check if old password matchs\r\n\t\tif (!UserController.checkIfUnencryptedPasswordIsValid(oldPassword, user)) {\r\n\t\t\tres.status(401).send();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t//Validate the model (password length)\r\n\t\tuser.password = newPassword;\r\n\t\tconst errors = await validate(user);\r\n\t\tif (errors.length > 0) {\r\n\t\t\tres.status(400).send(errors);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\t//Hash the new password and save\r\n\t\tUserController.hashPassword(user);\r\n\t\tuserRepository.save(user);\r\n\r\n\t\tres.status(204).send();\r\n\t};\r\n}\r\nexport default AuthController;\r\n","import { entityMap } from '@dakimbo/data';\r\nimport { Request, Response } from 'express';\r\nimport * as jwt from 'jsonwebtoken';\r\nimport { IsNull, Repository } from 'typeorm';\r\n\r\nimport config from '../config';\r\nimport { Database } from './../database/database';\r\n\r\nclass DataController {\r\n\tstatic get = async (req: Request, res: Response) => {\r\n\t\tfunction transformQueryValue(value: string) {\r\n\t\t\tconst lowerValue = value.toLowerCase();\r\n\t\t\tif (lowerValue === 'null') {\r\n\t\t\t\treturn IsNull();\r\n\t\t\t} else {\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst loadRelationships = async (\r\n\t\t\trepo: Repository<any>,\r\n\t\t\trelationships: string[],\r\n\t\t\tbaseEntities?: any[]\r\n\t\t) => {\r\n\t\t\tif (!baseEntities) {\r\n\t\t\t\tbaseEntities = await repo.find();\r\n\t\t\t}\r\n\r\n\t\t\tconst promises = [];\r\n\t\t\t// loop through the desired relationships and push a generated repo.find with a single relationship onto our promises array\r\n\t\t\trelationships.forEach(relationship => {\r\n\t\t\t\tpromises.push(repo.find({ select: ['id'], relations: [relationship] })); // only select id for lookup purposes\r\n\t\t\t});\r\n\r\n\t\t\t// Wait for all sub finds to complete and spread them into a res object\r\n\t\t\tconst { ...res } = await Promise.all(promises);\r\n\r\n\t\t\t// Loop over every sub find result, find the \"full entity\" we're trying to build from our base entities,\r\n\t\t\t// and attach the corresponding related entites to it (not a \"pure\" function)\r\n\t\t\tObject.keys(res).forEach(i => {\r\n\t\t\t\tres[i].forEach(r => {\r\n\t\t\t\t\tconst fullEntity = baseEntities.find(e => e.id === r.id);\r\n\t\t\t\t\tif (fullEntity) {\r\n\t\t\t\t\t\tconst relationship = relationships[i];\r\n\t\t\t\t\t\tfullEntity[relationship] = r[relationship];\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t};\r\n\r\n\t\tconst removeIgnoredAttrs = (entities: any[]) => {\r\n\t\t\tconst ignoreAttrs = ['relationships', 'loadAfterCreate'];\r\n\t\t\tentities.forEach(e => ignoreAttrs.forEach(attr => delete e[attr]));\r\n\t\t};\r\n\r\n\t\tconst entityName = req.params.entity;\r\n\t\tif (!entityName) {\r\n\t\t\tres.send('You must include the resource name to get these entities from!');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst { username } = <any>jwt.verify(<string>res.getHeader('token'), config.jwtSecret);\r\n\r\n\t\ttry {\r\n\t\t\tconst model = new entityMap[entityName];\r\n\r\n\t\t\tlet repo = Database._connection.getRepository(entityName);\r\n\t\t\tlet entities = [];\r\n\t\t\tconst queries = Object.keys(req.query);\r\n\r\n\t\t\tif (queries && queries.length) {\r\n\t\t\t\tlet query = {};\r\n\t\t\t\tlet attrs = [];\r\n\t\t\t\tfor (let i = 0, len = queries.length; i < len; i++) {\r\n\t\t\t\t\tconst key = queries[i];\r\n\t\t\t\t\tconst value = <any>req.query[key];\r\n\r\n\t\t\t\t\tif (key === 'attrs') {\r\n\t\t\t\t\t\tattrs = value.split(',');\r\n\t\t\t\t\t} else if (key.indexOf('.') >= 0) {\r\n\t\t\t\t\t\tconst splitProp = key.split('.');\r\n\t\t\t\t\t\tconst prop = splitProp[0],\r\n\t\t\t\t\t\t\tsubProp = splitProp[1];\r\n\t\t\t\t\t\tquery[prop] = {};\r\n\t\t\t\t\t\tquery[prop][subProp] = transformQueryValue(value);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tquery[key] = transformQueryValue(value);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst findOptions: any = {};\r\n\t\t\t\tif (query) {\r\n\t\t\t\t\tfindOptions.where = query;\r\n\t\t\t\t}\r\n\t\t\t\tif (attrs && attrs.length) {\r\n\t\t\t\t\tfindOptions.select = attrs;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tentities = await repo.find(findOptions);\r\n\t\t\t} else {\r\n\t\t\t\tentities = await repo.find({});\r\n\t\t\t}\r\n\r\n\t\t\tif (model && model.relationships && model.relationships.length) {\r\n\t\t\t\tawait loadRelationships(repo, model.relationships, entities);\r\n\t\t\t}\r\n\r\n\t\t\tremoveIgnoredAttrs(entities);\r\n\r\n\t\t\tconsole.log(\r\n\t\t\t\t`GET: ${entityName}${\r\n\t\t\t\t\tObject.keys(req.query).length ? ' ' + JSON.stringify(req.query) : ''\r\n\t\t\t\t} | Returned ${entities.length} entities! USER: ${username}`\r\n\t\t\t);\r\n\r\n\t\t\tres.send(entities);\r\n\t\t} catch (e) {\r\n\t\t\tres.status(500).send(e);\r\n\t\t\tconsole.log(\r\n\t\t\t\t`GET FAILED: ${entityName} ${JSON.stringify(req.query)} | USER: ${username}`\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\tstatic create = async (req: Request, res: Response) => {\r\n\t\tconst entityName = req.params.entity;\r\n\t\tif (!entityName) {\r\n\t\t\tres.send('You must include the resource name to post this entity to!');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst objToCreate = req.body;\r\n\r\n\t\tconst { username } = <any>jwt.verify(<string>res.getHeader('token'), config.jwtSecret);\r\n\r\n\t\tif (Array.isArray(objToCreate)) {\r\n\t\t\tobjToCreate.forEach(o => {\r\n\t\t\t\to.createUser = username;\r\n\t\t\t\to.modifyUser = username;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tobjToCreate.createUser = username;\r\n\t\t\tobjToCreate.modifyUser = username;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst model = entityMap[entityName];\r\n\r\n\t\t\tif (model.preProcess) {\r\n\t\t\t\tawait model.preProcess(objToCreate);\r\n\t\t\t}\r\n\r\n\t\t\tconst repo = Database._connection.getRepository(entityName);\r\n\t\t\tlet savedEntity = await repo.save(objToCreate);\r\n\r\n\t\t\tif (model.loadAfterCreate) {\r\n\t\t\t\tsavedEntity = await repo.findOne(objToCreate.id);\r\n\t\t\t}\r\n\t\t\tif (model.postProcess) {\r\n\t\t\t\tawait model.postProcess(savedEntity);\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log(`POST: ${entityName} | USER: ${username}`);\r\n\r\n\t\t\tres.send(savedEntity);\r\n\t\t} catch (e) {\r\n\t\t\tres.status(500).send(e);\r\n\t\t\tconsole.log(`POST FAILED: ${entityName} | USER: ${username}`);\r\n\t\t}\r\n\t};\r\n\r\n\tstatic update = async (req: Request, res: Response) => {\r\n\t\tconst entityName = req.params.entity;\r\n\t\tif (!entityName) {\r\n\t\t\tres.send('You must include the resource name to update this entity to!');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst objToUpdate = req.body;\r\n\r\n\t\tconst { username } = <any>jwt.verify(<string>res.getHeader('token'), config.jwtSecret);\r\n\r\n\t\tif (Array.isArray(objToUpdate)) {\r\n\t\t\tobjToUpdate.forEach(o => {\r\n\t\t\t\to.modifyUser = username;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tobjToUpdate.modifyUser = username;\r\n\t\t\tif (!objToUpdate.id) objToUpdate.id = req.params.id;\r\n\t\t}\r\n\r\n\t\ttry {\r\n\t\t\tconst model = entityMap[entityName];\r\n\r\n\t\t\tif (model.preProcess) {\r\n\t\t\t\tawait model.preProcess(objToUpdate);\r\n\t\t\t}\r\n\r\n\t\t\tconst repo = Database._connection.getRepository(entityName);\r\n\t\t\tconst updatedEntity = await repo.save(objToUpdate);\r\n\r\n\t\t\tif (model.postProcess) {\r\n\t\t\t\tawait model.postProcess(objToUpdate);\r\n\t\t\t}\r\n\r\n\t\t\tconsole.log(`PATCH: ${entityName} | ${objToUpdate.id} | USER: ${username}`);\r\n\r\n\t\t\tres.send(updatedEntity);\r\n\t\t} catch (e) {\r\n\t\t\tres.status(500).send(e);\r\n\t\t\tconsole.error(`PATCH FAILED: ${entityName} | ${objToUpdate.id} | USER: ${username}`);\r\n\t\t}\r\n\t};\r\n\r\n\tstatic delete = async (req: Request, res: Response) => {\r\n\t\tconst entityName = req.params.entity;\r\n\t\tif (!entityName) {\r\n\t\t\tres.send('You must include the resource name to delete this entity against!');\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst { username } = <any>jwt.verify(<string>res.getHeader('token'), config.jwtSecret);\r\n\r\n\t\tconst idToDelete = req.params.id;\r\n\r\n\t\ttry {\r\n\t\t\tconst repo = Database._connection.getRepository(entityName);\r\n\t\t\tawait repo.delete(idToDelete);\r\n\r\n\t\t\tconsole.log(`DELETE: ${entityName} | ${idToDelete} | USER: ${username}`);\r\n\r\n\t\t\tres.send({\r\n\t\t\t\tstatus: 'Delete Success!'\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tres.status(500).send(e);\r\n\t\t\tconsole.error(`DELETE FAILED: ${entityName} | ${idToDelete} | USER: ${username}`);\r\n\t\t}\r\n\t};\r\n}\r\nexport default DataController;\r\n","import { Request, Response } from 'express';\r\nimport * as jwt from 'jsonwebtoken';\r\n\r\nimport config from '../config';\r\nimport { Database } from './../database/database';\r\n\r\nclass MetricsController {\r\n\tstatic getMetricsFor = async (req: Request, res: Response) => {\r\n\t\tconst { username } = <any>jwt.verify(<string>res.getHeader('token'), config.jwtSecret);\r\n\r\n\t\tconst metricToFind = req.params.metricName;\r\n\r\n\t\ttry {\r\n\t\t\tconst metricRepo = Database._connection.getRepository(metricToFind);\r\n\t\t\tconst metrics = await metricRepo.find();\r\n\t\t\tconsole.log(\r\n\t\t\t\t`METRICS FETCHED: ${metricToFind} --- FOUND: ${metrics.length} | USER: ${username}`\r\n\t\t\t);\r\n\t\t\tres.send(metrics);\r\n\t\t} catch (error) {\r\n\t\t\tres.status(500).send(error);\r\n\t\t\tconsole.log(`FAILED: Metrics fetch for ${metricToFind}`);\r\n\t\t}\r\n\t};\r\n}\r\nexport default MetricsController;\r\n","import { User } from '@dakimbo/data';\nimport * as bcrypt from 'bcryptjs';\nimport { validate } from 'class-validator';\nimport { Request, Response } from 'express';\nimport * as jwt from 'jsonwebtoken';\nimport { getRepository } from 'typeorm';\n\nimport config from '../config';\n\nclass UserController {\n\tstatic listAll = async (req: Request, res: Response) => {\n\t\t//Get users from database\n\t\tconst userRepository = getRepository(User);\n\t\tconst users = await userRepository.find({\n\t\t\tselect: ['id', 'username', 'role', 'email', 'createDate'] //We dont want to send the passwords on response\n\t\t});\n\n\t\t//Send the users object\n\t\tres.send(users);\n\t};\n\n\tstatic getOneById = async (req: Request, res: Response) => {\n\t\t//Get the ID from the url\n\t\tconst id: number = +req.params.id;\n\n\t\t//Get the user from database\n\t\tconst userRepository = getRepository(User);\n\t\ttry {\n\t\t\tconst user = await userRepository.findOneOrFail(id, {\n\t\t\t\tselect: ['id', 'username', 'role'] //We dont want to send the password on response\n\t\t\t});\n\t\t\tres.status(201).send(user);\n\t\t} catch (error) {\n\t\t\tres.status(404).send('User not found');\n\t\t}\n\t};\n\n\tstatic newUser = async (req: Request, res: Response) => {\n\t\t//Get parameters from the body\n\t\tlet { username, password, email, role } = req.body;\n\t\tlet user = new User();\n\t\tuser.username = username;\n\t\tuser.password = password;\n\t\tuser.email = email;\n\t\tuser.role = role;\n\n\t\t// const { adminUser } = <any>jwt.verify(<string>res.getHeader('token'), config.jwtSecret);\n\n\t\t//Validade if the parameters are ok\n\t\tconst errors = await validate(user);\n\t\tif (errors.length > 0) {\n\t\t\tres.status(400).send(errors);\n\t\t\treturn;\n\t\t}\n\n\t\t//Hash the password, to securely store on DB\n\t\tUserController.hashPassword(user);\n\n\t\t//Try to save. If fails, the username is already in use\n\t\tconst userRepository = getRepository(User);\n\t\ttry {\n\t\t\tawait userRepository.save(user);\n\t\t} catch (e) {\n\t\t\tres.status(409).send('Username already in use!');\n\t\t\treturn;\n\t\t}\n\n\t\tdelete user.password;\n\n\t\t//If all ok, send 201 response\n\t\tconsole.log(`CREATE USER: ${user.username}`);\n\t\tres.status(201).send(user);\n\t};\n\n\tstatic editUser = async (req: Request, res: Response) => {\n\t\t//Get the ID from the url\n\t\tconst id = req.params.id;\n\n\t\t//Get values from the body\n\t\tconst { username, password, role } = req.body;\n\n\t\tconst { adminUser } = <any>jwt.verify(<string>res.getHeader('token'), config.jwtSecret);\n\n\t\t//Try to find user on database\n\t\tconst userRepository = getRepository(User);\n\t\tlet user;\n\t\ttry {\n\t\t\tuser = await userRepository.findOneOrFail(id);\n\t\t} catch (error) {\n\t\t\t//If not found, send a 404 response\n\t\t\tres.status(404).send('User not found');\n\t\t\treturn;\n\t\t}\n\n\t\t//Validate the new values on model\n\t\tuser.username = username;\n\t\tuser.role = role;\n\n\t\tif (password) {\n\t\t\tuser.password = password;\n\t\t\tUserController.hashPassword(user);\n\t\t}\n\n\t\tconst errors = await validate(user);\n\t\tif (errors.length > 0) {\n\t\t\tres.status(400).send(errors);\n\t\t\treturn;\n\t\t}\n\n\t\t//Try to save, if fails, that means username already in use\n\t\ttry {\n\t\t\tawait userRepository.save(user);\n\t\t} catch (e) {\n\t\t\tres.status(409).send('username already in use');\n\t\t\treturn;\n\t\t}\n\t\t//After all send a 204 (no content, but accepted) response\n\t\tconsole.log(`EDIT USER: ${user.username} | BY ADMIN: ${adminUser}`);\n\t\tres.status(204).send();\n\t};\n\n\tstatic deleteUser = async (req: Request, res: Response) => {\n\t\t//Get the ID from the url\n\t\tconst id = req.params.id;\n\n\t\tconst { adminUser } = <any>jwt.verify(<string>res.getHeader('token'), config.jwtSecret);\n\n\t\tconst userRepository = getRepository(User);\n\t\tlet user: User;\n\t\ttry {\n\t\t\tuser = await userRepository.findOneOrFail(id);\n\t\t} catch (error) {\n\t\t\tres.status(404).send('User not found');\n\t\t\treturn;\n\t\t}\n\t\tuserRepository.delete(id);\n\n\t\t//After all send a 204 (no content, but accepted) response\n\t\tconsole.log(`DELETE USER: ${user.username} | BY ADMIN: ${adminUser}`);\n\t\tres.status(204).send();\n\t};\n\n\tstatic getCurrentUser = async (req: Request, res: Response) => {\n\t\t// Get the jwt token from the head\n\t\tconst authHeader = <string>req.headers['authorization'];\n\t\tif (!authHeader || !authHeader.includes('Bearer')) {\n\t\t\tres.status(408).send('No Authorization Header or Bearer token presented!');\n\t\t\treturn;\n\t\t}\n\n\t\tconst token = authHeader.split('Bearer')[1].trim();\n\t\tlet jwtPayload;\n\n\t\t// Try to validate the token and get data\n\t\ttry {\n\t\t\tjwtPayload = <any>jwt.verify(token, config.jwtSecret);\n\t\t\tres.locals.jwtPayload = jwtPayload;\n\t\t} catch (error) {\n\t\t\t// If token is not valid, respond with 401 (unauthorized)\n\t\t\tres.status(401).send();\n\t\t\treturn;\n\t\t}\n\n\t\t// The token is valid for 1 hour\n\t\t// We want to send a new token on every request\n\t\tconst { userId, username } = jwtPayload;\n\n\t\tconst userRepository = getRepository(User);\n\t\tlet user: User;\n\t\ttry {\n\t\t\tuser = await userRepository.findOneOrFail(userId);\n\t\t} catch (error) {\n\t\t\tres.status(404).send('User not found');\n\t\t\treturn;\n\t\t}\n\n\t\tdelete user.password;\n\n\t\tres.status(201).send(user);\n\t};\n\n\tstatic hashPassword(userEntity: User) {\n\t\tuserEntity.password = bcrypt.hashSync(userEntity.password, 8);\n\t}\n\n\tstatic checkIfUnencryptedPasswordIsValid(unencryptedPassword: string, userEntity: User) {\n\t\treturn bcrypt.compareSync(unencryptedPassword, userEntity.password);\n\t}\n}\n\nexport default UserController;\n","import { Connection, ConnectionOptions, createConnection } from 'typeorm';\r\n\r\nexport class Database {\r\n\tstatic _connection: Connection;\r\n\tstatic _dbOptions: ConnectionOptions | any;\r\n\r\n\tconstructor() {}\r\n\r\n\tasync connect(dbOptions: ConnectionOptions) {\r\n\t\tDatabase._dbOptions = dbOptions;\r\n\t\ttry {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`Connecting to ${Database._dbOptions.type} Database: ${Database._dbOptions.database} at ${Database._dbOptions.host}:${Database._dbOptions.port} with user: ${Database._dbOptions.username}`\r\n\t\t\t);\r\n\t\t\tDatabase._connection = await createConnection(Database._dbOptions);\r\n\r\n\t\t\tawait this.runMigrations();\r\n\r\n\t\t\tconsole.log(`Connection to database established!`);\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(\r\n\t\t\t\t`Error Connecting to ${Database._dbOptions.host}:${Database._dbOptions.port}\\n`,\r\n\t\t\t\te\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tasync runMigrations() {\r\n\t\tconst migrations = [];\r\n\t\tif (migrations.length) {\r\n\t\t\tconsole.log(`Running migrations...`);\r\n\t\t\tawait Promise.all(migrations);\r\n\t\t\tconsole.log(`Migrations finished!`);\r\n\t\t}\r\n\t}\r\n}\r\n","require('./utilities/logStamp');\nrequire('dotenv').config();\n\nimport 'reflect-metadata';\n\nimport bodyParser from 'body-parser';\nimport compression from 'compression';\nimport cors from 'cors';\nimport express from 'express';\nimport helmet from 'helmet';\n\nimport { Database } from './database/database';\nimport routes from './routes';\nimport config from './config';\n\n(async () => {\n\tconst db = new Database();\n\tawait db.connect(<any>config.dbOptions);\n\n\tconst app = express();\n\tconst port = process.env.port || 1337;\n\n\t// MIDDLEWARE\n\tapp.use(cors());\n\tapp.use(helmet());\n\tapp.use(compression());\n\tapp.use(bodyParser.urlencoded({ extended: false }));\n\tapp.use(bodyParser.json());\n\n\tapp.use(express.static(__dirname + '/public'));\n\tapp.use('/', routes);\n\tapp.get('*', (req, res) => {\n\t\tres.sendFile(__dirname + '/public/index.html');\n\t});\n\n\tconst server = app.listen(port, () => {\n\t\treturn console.log(`Server is listening on ${port}`);\n\t});\n\tserver.on('error', console.error);\n})();\n","import { Request, Response, NextFunction } from 'express';\nimport * as jwt from 'jsonwebtoken';\nimport config from '../config';\n\nexport const checkJwt = (req: Request, res: Response, next: NextFunction) => {\n\t// Get the jwt token from the head\n\tconst authHeader = <string>req.headers['authorization'];\n\tif (!authHeader || !authHeader.includes('Bearer')) {\n\t\tres.status(408).send('No Authorization Header or Bearer token presented!');\n\t\treturn;\n\t}\n\n\tconst token = authHeader.split('Bearer')[1].trim();\n\tlet jwtPayload;\n\n\t// Try to validate the token and get data\n\ttry {\n\t\tjwtPayload = <any>jwt.verify(token, config.jwtSecret);\n\t\tres.locals.jwtPayload = jwtPayload;\n\t} catch (error) {\n\t\t// If token is not valid, respond with 401 (unauthorized)\n\t\tres.status(401).send();\n\t\treturn;\n\t}\n\n\t// The token is valid for 1 hour\n\t// We want to send a new token on every request\n\tconst { userId, username } = jwtPayload;\n\tconst newToken = jwt.sign({ userId, username }, config.jwtSecret, {\n\t\texpiresIn: '1h'\n\t});\n\tres.setHeader('token', newToken);\n\n\t// Call the next middleware or controller\n\tnext();\n};\n","import { NextFunction, Request, Response } from 'express';\nimport { getRepository } from 'typeorm';\n\nimport { User } from '@dakimbo/data';\n\nexport const checkRole = (roles: Array<string>) => {\n\treturn async (req: Request, res: Response, next: NextFunction) => {\n\t\t// Get the user ID from previous midleware\n\t\tconst id = res.locals.jwtPayload.userId;\n\n\t\t// Get user role from the database\n\t\tconst userRepository = getRepository(User);\n\t\tlet user: User;\n\t\ttry {\n\t\t\tuser = await userRepository.findOneOrFail(id);\n\t\t} catch (id) {\n\t\t\tres.status(401).send();\n\t\t}\n\n\t\t// Check if array of authorized roles includes the user's role\n\t\tif (roles.indexOf(user.role) > -1) next();\n\t\telse res.status(401).send();\n\t};\n};\n","import { Router } from 'express';\nimport AuthController from '../controllers/authController';\nimport { checkJwt } from '../middlewares/checkJwt';\n\nconst router = Router();\n\n//Login route\nrouter.post('/login', AuthController.login);\n\n//Change my password\nrouter.post('/change-password', [checkJwt], AuthController.changePassword);\n\nexport default router;\n","import { Router } from 'express';\r\nimport { checkJwt } from '../middlewares/checkJwt';\r\nimport { checkRole } from '../middlewares/checkRole';\r\nimport DataController from '../controllers/dataController';\r\nimport config from '../config';\r\n\r\nconst router = Router();\r\n\r\nif (config.isProd) {\r\n\trouter.get('/:entity', [checkJwt, checkRole(['superadmin', 'admin'])], DataController.get);\r\n\r\n\trouter.post('/:entity', [checkJwt, checkRole(['superadmin', 'admin'])], DataController.create);\r\n\r\n\trouter.patch('/:entity/:id', [checkJwt, checkRole(['superadmin', 'admin'])], DataController.update);\r\n\r\n\trouter.put('/:entity/:id', [checkJwt, checkRole(['superadmin', 'admin'])], DataController.update);\r\n\r\n\trouter.delete('/:entity/:id', [checkJwt, checkRole(['superamdin', 'admin'])], DataController.delete);\r\n} else {\r\n\trouter.get('/:entity', [checkJwt, checkRole(['superadmin', 'admin'])], DataController.get);\r\n\r\n\trouter.post('/:entity', [checkJwt, checkRole(['superadmin', 'admin'])], DataController.create);\r\n\r\n\trouter.patch('/:entity/:id', [checkJwt, checkRole(['superadmin', 'admin'])], DataController.update);\r\n\r\n\trouter.put('/:entity/:id', [checkJwt, checkRole(['superadmin', 'admin'])], DataController.update);\r\n\r\n\trouter.delete('/:entity/:id', [checkJwt, checkRole(['superadmin', 'admin'])], DataController.delete);\r\n}\r\n\r\nexport default router;\r\n","import { Router } from 'express';\r\nimport auth from './auth';\r\nimport user from './user';\r\nimport data from './data';\r\nimport metrics from './metrics';\r\n\r\nconst routes = Router();\r\n\r\nroutes.use('/auth', auth);\r\nroutes.use('/user', user);\r\nroutes.use('/data', data);\r\nroutes.use('/metrics', metrics);\r\n\r\nexport default routes;","import { Router } from 'express';\r\nimport { checkJwt } from '../middlewares/checkJwt';\r\nimport { checkRole } from '../middlewares/checkRole';\r\nimport MetricsController from '../controllers/metricsController';\r\n\r\nconst router = Router();\r\n\r\n// Get specific metric\r\nrouter.get('/:metricName', [checkJwt, checkRole(['superadmin'])], MetricsController.getMetricsFor);\r\n\r\nexport default router;","import { Router } from 'express';\nimport UserController from '../controllers/userController';\nimport { checkJwt } from '../middlewares/checkJwt';\nimport { checkRole } from '../middlewares/checkRole';\n\nconst router = Router();\n\n//Get all users\nrouter.get('/', [checkJwt, checkRole(['admin'])], UserController.listAll);\n\n// Get one user\nrouter.get('/:id([0-9]+)', [checkJwt, checkRole(['admin'])], UserController.getOneById);\n\n//Create a new user\nrouter.post('/', UserController.newUser);\n\n//Edit one user\nrouter.patch('/:id([0-9]+)', [checkJwt, checkRole(['admin'])], UserController.editUser);\n\n//Delete one user\nrouter.delete('/:id([0-9]+)', [checkJwt, checkRole(['admin'])], UserController.deleteUser);\n\n// Current User\nrouter.get('/me', [checkJwt], UserController.getCurrentUser);\n\nexport default router;\n","const log = console.log;\nconsole.log = function() {\n\tconst firstParameter = arguments[0];\n\tconst otherParameters = Array.prototype.slice.call(arguments, 1);\n\tlog.apply(console, [`${dateFormat()} ${firstParameter}`.concat(otherParameters)]);\n};\n\nconst error = console.error;\nconsole.error = function() {\n\tconst firstParameter = arguments[0];\n\tconst otherParameters = Array.prototype.slice.call(arguments, 1);\n\terror.apply(console, [`${dateFormat()} ${firstParameter}`.concat(otherParameters)]);\n};\n\nconst dateFormat = () => {\n\treturn `[\\x1b[34m${new Date().toISOString()}\\x1b[0m]`;\n};\n","// SERVICES\r\nexport * from './lib/services/data/data-service.module';\r\nexport * from './lib/services/data/data.service';\r\n\r\n/**\r\n * ENTITIES\r\n */\r\nexport * from './lib/entities/_entity-map';\r\n","import { User } from './auth/user';\r\n\r\nexport const entityMap = {\r\n\t// AUTH\r\n\tUser\r\n};\r\n\r\nexport { User } from './auth/user';\r\n","import { IsNotEmpty, Length } from 'class-validator';\r\nimport { Column, Entity, Unique, EntitySchema } from 'typeorm';\r\n\r\nimport { BaseModel } from '../base';\r\n\r\n@Entity({\r\n\tname: 'auth_user',\r\n\torderBy: {\r\n\t\tusername: 'ASC'\r\n\t}\r\n})\r\n@Unique(['username'])\r\nexport class User extends BaseModel {\r\n\tconstructor(props?: User) {\r\n\t\tsuper(props);\r\n\t}\r\n\r\n\t@Column()\r\n\t@Length(4, 20)\r\n\tusername?: string;\r\n\r\n\t@Column()\r\n\t@Length(4, 100)\r\n\tpassword?: string;\r\n\r\n\t@Column({\r\n\t\tlength: 255\r\n\t})\r\n\temail?: string;\r\n\r\n\t@Column()\r\n\t@IsNotEmpty()\r\n\trole?: string;\r\n\r\n\t@Column({\r\n\t\tnullable: true,\r\n\t\tdefault: 0\r\n\t})\r\n\tnumSuccessfulLogin?: number;\r\n\r\n\t@Column({\r\n\t\tnullable: true,\r\n\t\tdefault: 0\r\n\t})\r\n\tnumFailedLogin?: number;\r\n\r\n\tjwt?: string;\r\n\texpiry?: Date;\r\n}","import { Column, Connection, CreateDateColumn, PrimaryGeneratedColumn, UpdateDateColumn, VersionColumn } from 'typeorm';\r\n\r\nexport interface EntityTransaction {\r\n\trelationships?: string[];\r\n\tloadAfterCreate?: boolean;\r\n\r\n\tpreProcess?: (entity: any, dbConnection: Connection) => void;\r\n\tpostProcess?: (entity: any, dbConnection: Connection) => void;\r\n}\r\n\r\nexport abstract class BaseModel implements EntityTransaction {\r\n\tconstructor(props?: any) {\r\n\t\tif (!props) return;\r\n\r\n\t\tObject.keys(props).forEach(prop => {\r\n\t\t\tconst value = props[prop];\r\n\t\t\tthis[prop] = value;\r\n\t\t});\r\n\t}\r\n\r\n\t@PrimaryGeneratedColumn('uuid')\r\n\tid?: string;\r\n\r\n\t@VersionColumn({\r\n\t\tnullable: true\r\n\t})\r\n\tversion?: string;\r\n\r\n\t@CreateDateColumn()\r\n\tcreateDate?: Date;\r\n\r\n\t@UpdateDateColumn()\r\n\tmodifyDate?: Date;\r\n\r\n\t@Column({\r\n\t\tnullable: true\r\n\t})\r\n\tcreateUser?: string;\r\n\r\n\t@Column({\r\n\t\tnullable: true\r\n\t})\r\n\tmodifyUser?: string;\r\n\r\n\trelationships?: string[];\r\n\tloadAfterCreate?: boolean;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\n\r\nimport { DataService } from './data.service';\r\n\r\n@Injectable()\r\nexport class DataDelete {\r\n\tprivate DS: DataService;\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\tsetDataService(ds: DataService) {\r\n\t\tthis.DS = ds;\r\n\t}\r\n\r\n\t/**\r\n\t * Delete a front end object fron the database\r\n\t * @param model The interface / class to construct the query against and build response objects from\r\n\t * @param objToDelete The front end object to be deleted in the DB\r\n\t */\r\n\tdelete<T>(model: T | any, objToDelete: T | any): Observable<T[]> {\r\n\t\tif (this.DS.isOptimistic) {\r\n\t\t\t// Optimistically Remove the object to delete from the front end cache by filtering out everything that doesn't have the same id\r\n\t\t\tthis.DS.cache[this.DS.getModelName(model)] = this.DS.cache[this.DS.getModelName(model)].filter(\r\n\t\t\t\tel => el.id !== (objToDelete.id || objToDelete)\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn this.http\r\n\t\t\t.delete<T[]>(\r\n\t\t\t\t`${this.DS.apiEndpoint}/${this.DS.getModelName(model)}/${objToDelete.id || objToDelete}`\r\n\t\t\t)\r\n\t\t\t.pipe(\r\n\t\t\t\ttap((res: T[]) => {\r\n\t\t\t\t\tif (!this.DS.isOptimistic) {\r\n\t\t\t\t\t\t// wait for the server response before modifying the front end\r\n\t\t\t\t\t\tthis.DS.cache[this.DS.getModelName(model)] = this.DS.cache[\r\n\t\t\t\t\t\t\tmodel.name || model\r\n\t\t\t\t\t\t].filter(el => el.id !== objToDelete.id);\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t}\r\n\r\n\tprivate cacheAndNotifyDelete<T>(model: T | any, objToDelete: T | any) {\r\n\t\tif (!this.DS.cache[this.DS.getModelName(model)]) return;\r\n\t\t// Remove the object to delete from the front end cache by filtering out everything that doesn't have the same id\r\n\t\tthis.DS.cache[this.DS.getModelName(model)] = this.DS.cache[this.DS.getModelName(model)].filter(\r\n\t\t\tel => el.id !== (objToDelete.id || objToDelete)\r\n\t\t);\r\n\r\n\t\tthis.DS.subjectMap[this.DS.getModelName(model)].next(this.DS.cache[this.DS.getModelName(model)]);\r\n\t\tthis.DS.loadingMap[this.DS.getModelName(model)].next(false);\r\n\t}\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { catchError, tap } from 'rxjs/operators';\r\n\r\nimport { DataService } from './data.service';\r\nimport { GenericModelHttpParams } from './interceptors/GenericModelHttpParams';\r\n\r\n@Injectable()\r\nexport class DataRead {\r\n\tprivate DS: DataService;\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\tsetDataService(ds: DataService) {\r\n\t\tthis.DS = ds;\r\n\t}\r\n\r\n\t/**\r\n\t * Using a model interface's table definition, do a HTTP get\r\n\t * @param model The interface / class to construct the query against and build response objects from\r\n\t * @param query A limiting query to apply to the get. Expects an object of type URLSearchParams to append to the read, or a simple string\r\n\t */\r\n\tread<T>(model: T | any, query?: HttpParams | string | any): Observable<T[]> {\r\n\t\treturn this.http\r\n\t\t\t.get<T[]>(\r\n\t\t\t\t`${this.DS.apiEndpoint}/${this.DS.getModelName(model)}${\r\n\t\t\t\t\tquery ? '?' + this.createSearchParams(query) : ''\r\n\t\t\t\t}`,\r\n\t\t\t\t{\r\n\t\t\t\t\tparams: new GenericModelHttpParams(model)\r\n\t\t\t\t}\r\n\t\t\t)\r\n\t\t\t.pipe(\r\n\t\t\t\ttap((res: T[]) => {\r\n\t\t\t\t\tthis.cacheAndNotifyRead(model, res);\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t}\r\n\r\n\tasync readExternal(queryUrl): Promise<any> {\r\n\t\tlet url = queryUrl;\r\n\t\treturn this.http.get(url);\r\n\t}\r\n\r\n\tprivate createSearchParams(query: HttpParams | string | any): HttpParams | string {\r\n\t\tif (!query) return '';\r\n\r\n\t\tlet newParams = new HttpParams();\r\n\r\n\t\tif (typeof query === 'string') {\r\n\t\t\tlet searchParams = new HttpParams();\r\n\t\t\tconst splitQuery = query.split('&');\r\n\t\t\tsplitQuery.forEach(param => {\r\n\t\t\t\tconst keyValPair = param.split('=');\r\n\t\t\t\tsearchParams = searchParams.append(keyValPair[0], keyValPair[1]);\r\n\t\t\t});\r\n\t\t\tnewParams = searchParams;\r\n\t\t} else if (query instanceof HttpParams) {\r\n\t\t\tnewParams = query;\r\n\t\t} else if (query instanceof Array) {\r\n\t\t\tconsole.log(query);\r\n\t\t} else {\r\n\t\t\t// Parse object into HttpParams\r\n\t\t\tObject.keys(query).forEach(key => {\r\n\t\t\t\tconst queryVals = query[key];\r\n\t\t\t\tif (Array.isArray(queryVals)) {\r\n\t\t\t\t\tqueryVals.forEach(qv => (newParams = newParams.append(key, qv)));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnewParams = newParams.append(key, queryVals);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treturn newParams.toString();\r\n\t}\r\n\r\n\tprivate cacheAndNotifyRead<T>(model: T | any, res: T[]) {\r\n\t\t// Reset the cache entry since we are getting new results\r\n\t\tthis.DS.cache[this.DS.getModelName(model)] = [];\r\n\r\n\t\tif (res instanceof Array) {\r\n\t\t\tres.forEach((el: T) => {\r\n\t\t\t\tthis.DS.cache[this.DS.getModelName(model)].push(Object.assign({}, el));\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\t// Update Frontend\r\n\t\tthis.DS.subjectMap[this.DS.getModelName(model)].next(\r\n\t\t\tthis.DS.cache[this.DS.getModelName(model)]\r\n\t\t);\r\n\t}\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport { DataService } from './data.service';\r\nimport { Observable, forkJoin } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nenum Action {\r\n\tCREATE = 'Create',\r\n\tUPDATE = 'Update'\r\n}\r\n\r\n@Injectable()\r\nexport class DataSave {\r\n\tprivate DS: DataService;\r\n\r\n\tconstructor(private http: HttpClient) {}\r\n\r\n\tsetDataService(ds: DataService) {\r\n\t\tthis.DS = ds;\r\n\t}\r\n\r\n\t/**\r\n\t * Save an object to the database; saving will determine if the object is new (doesn't have an id) or needs to be updated. This will determine whether or not to POST or PATCH the object.\r\n\t * It will also detect if the incoming objToSave is an array, indicating we have a bulk update scenario, so it will split this into a create and update call with array.\r\n\t * Special care needs to be taken to ensure the front end object receives the new id from the backend\r\n\t * @param model The interface / class to construct the query against and build response objects from\r\n\t * @param objToSave The front end object to be saved\r\n\t */\r\n\tsave<T>(model: T | any, objToSave: T | T[] | any | any[]): Observable<T | any> {\r\n\t\tconst url = `${this.DS.apiEndpoint}/${this.DS.getModelName(model)}${objToSave.id ? '/' + objToSave.id : ''}`;\r\n\r\n\t\tif (Array.isArray(objToSave)) {\r\n\t\t\t// BULK SAVE\r\n\t\t\tobjToSave.forEach((o, i) => (o._saveId = i));\r\n\r\n\t\t\tconst toCreate = [],\r\n\t\t\t\ttoUpdate = [];\r\n\r\n\t\t\tobjToSave.forEach(o => {\r\n\t\t\t\to.id ? toUpdate.push(o) : toCreate.push(o);\r\n\t\t\t});\r\n\r\n\t\t\treturn forkJoin(\r\n\t\t\t\tthis.http.post(url, JSON.stringify(toCreate)).pipe(\r\n\t\t\t\t\ttap((res: T | any) => {\r\n\t\t\t\t\t\tObject.assign(objToSave, res);\r\n\t\t\t\t\t\tthis.cacheAndNotifySaved(model, objToSave, Action.CREATE);\r\n\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t})\r\n\t\t\t\t),\r\n\t\t\t\tthis.http.put(url, JSON.stringify(toUpdate)).pipe(\r\n\t\t\t\t\ttap((res: T | any) => {\r\n\t\t\t\t\t\tObject.assign(objToSave, res);\r\n\t\t\t\t\t\tthis.cacheAndNotifySaved(model, objToSave, Action.UPDATE);\r\n\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t})\r\n\t\t\t\t)\r\n\t\t\t).pipe(\r\n\t\t\t\ttap((res: T[] | any[] | any) => {\r\n\t\t\t\t\t(res.results || res || []).forEach(o => {\r\n\t\t\t\t\t\tconst objIdSet = objToSave.find(os => os._saveId === o._saveId);\r\n\t\t\t\t\t\tif (objIdSet) objIdSet.id = o.id;\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tobjToSave.forEach(o => delete o._saveId);\r\n\r\n\t\t\t\t\tthis.cacheAndNotifySaved(model, objToSave, Action.CREATE); // TODO: This won't work, need to handle array situation!\r\n\t\t\t\t\treturn objToSave;\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tif (objToSave && objToSave.id) {\r\n\t\t\t\treturn this.http.put(url, objToSave).pipe(\r\n\t\t\t\t\ttap((res: T | any) => {\r\n\t\t\t\t\t\tObject.assign(objToSave, res);\r\n\t\t\t\t\t\tthis.cacheAndNotifySaved(model, objToSave, Action.UPDATE);\r\n\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t} else {\r\n\t\t\t\treturn this.http.post(url, objToSave).pipe(\r\n\t\t\t\t\ttap((res: T | any) => {\r\n\t\t\t\t\t\tObject.assign(objToSave, res);\r\n\t\t\t\t\t\tthis.cacheAndNotifySaved(model, objToSave, Action.CREATE);\r\n\t\t\t\t\t\treturn res;\r\n\t\t\t\t\t})\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate cacheAndNotifySaved<T>(model: T | any, newModelObj, action: Action) {\r\n\t\tswitch (action) {\r\n\t\t\tcase Action.CREATE:\r\n\t\t\t\t// Append the new object into the front end cache\r\n\t\t\t\tthis.DS.cache[this.DS.getModelName(model)].push({ ...newModelObj });\r\n\t\t\t\tbreak;\r\n\t\t\tcase Action.UPDATE:\r\n\t\t\t\t// Update the object in the front end cache\r\n\t\t\t\tlet foundObj = this.DS.cache[this.DS.getModelName(model)].find(\r\n\t\t\t\t\tentity => entity.id === newModelObj.id\r\n\t\t\t\t);\r\n\t\t\t\tif (foundObj) foundObj = { ...foundObj, ...newModelObj };\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\r\n\t\tthis.DS.subjectMap[this.DS.getModelName(model)].next(this.DS.cache[this.DS.getModelName(model)]);\r\n\t\tthis.DS.loadingMap[this.DS.getModelName(model)].next(false);\r\n\t}\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { InjectionToken, ModuleWithProviders, NgModule, Optional, SkipSelf } from '@angular/core';\r\n\r\nimport { DataDelete } from './_delete';\r\nimport { DataRead } from './_read';\r\nimport { DataSave } from './_save';\r\nimport { DataServiceConfig } from './data-service-config.interface';\r\nimport { DataService } from './data.service';\r\nimport { DataServiceHeaderInterceptor } from './interceptors/header.interceptor';\r\nimport { LoadingInterceptor } from './interceptors/loading.interceptor';\r\n\r\nconst configToken = new InjectionToken<DataServiceConfig>('dataServiceConfig');\r\n\r\n@NgModule({\r\n\tdeclarations: [],\r\n\timports: [CommonModule]\r\n})\r\nexport class DataServiceModule {\r\n\tconstructor(@Optional() @SkipSelf() parentModule: DataServiceModule) {\r\n\t\tif (parentModule) {\r\n\t\t\tthrow new Error(\r\n\t\t\t\t'DataServiceModule is already loaded. Import it in the AppModule only.'\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic forRoot(dsConfig: DataServiceConfig): ModuleWithProviders {\r\n\t\treturn {\r\n\t\t\tngModule: DataServiceModule,\r\n\t\t\tproviders: [\r\n\t\t\t\t{ provide: HTTP_INTERCEPTORS, useClass: LoadingInterceptor, multi: true },\r\n\t\t\t\t{ provide: HTTP_INTERCEPTORS, useClass: DataServiceHeaderInterceptor, multi: true },\r\n\t\t\t\t{ provide: 'dsConfig', useValue: dsConfig },\r\n\t\t\t\tDataService,\r\n\t\t\t\tDataSave,\r\n\t\t\t\tDataRead,\r\n\t\t\t\tDataDelete\r\n\t\t\t]\r\n\t\t};\r\n\t}\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of, Subject } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\n\r\nimport { entityMap } from '../../entities/_entity-map';\r\nimport { DataDelete } from './_delete';\r\nimport { DataRead } from './_read';\r\nimport { DataSave } from './_save';\r\nimport { DataServiceConfig } from './data-service-config.interface';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class DataService {\r\n\tapiEndpoint: string;\r\n\ttables: any;\r\n\r\n\t// Determine whether or not to be optimstic with our Http calls in terms of updating the front end. True means update the front end right away despite what the server does.\r\n\tisOptimistic = true;\r\n\r\n\t// A simple object that is used a cache for any data that has been loaded into the system\r\n\tcache: CacheMap = {};\r\n\t// A map of TableName => Subject for external components to subscribe to, in order to be notified of updates to that table's data\r\n\tsubjectMap: SubjectMap = {};\r\n\t// A map of TableName => any (model type) for external components to set and subscribe to get a selected entity\r\n\tactiveMap: ActiveMap = {};\r\n\t// A map of TableName => Boolean to components to use for displaying a loading icon when that table's data is being loaded or modified\r\n\tloadingMap: LoadingMap = {};\r\n\r\n\tconstructor(\r\n\t\tprivate DSV: DataSave,\r\n\t\tprivate DR: DataRead,\r\n\t\tprivate DD: DataDelete,\r\n\t\t@Inject('dsConfig') config: DataServiceConfig\r\n\t) {\r\n\t\tthis.DSV.setDataService(this);\r\n\t\tthis.DR.setDataService(this);\r\n\t\tthis.DD.setDataService(this);\r\n\r\n\t\tif (config) {\r\n\t\t\tthis.setupDataService(config);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate setupDataService(config: DataServiceConfig) {\r\n\t\tthis.apiEndpoint = config.apiEndpoint;\r\n\t\tthis.tables = { ...config.tables, ...entityMap };\r\n\t\tthis.setupLocalProps();\r\n\t}\r\n\r\n\tprivate setupLocalProps() {\r\n\t\ttry {\r\n\t\t\t// TODO: Figure out how to make a subject with the correct TS model based on the table name\r\n\t\t\tObject.keys(this.tables).forEach((table) => {\r\n\t\t\t\tthis.addTableToLocalProps(table);\r\n\t\t\t});\r\n\t\t} catch (e) {\r\n\t\t\tconsole.error(`Tables in DataService was null!`, e);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic addTableToLocalProps(table: any) {\r\n\t\tif (!table) return;\r\n\t\tthis.loadingMap[table] = new BehaviorSubject<boolean>(false);\r\n\t\tthis.cache[table] = [];\r\n\t\tthis.subjectMap[table] = new Subject<any>();\r\n\t\tthis.activeMap[table] = null;\r\n\t}\r\n\r\n\t/**\r\n\t * PUBLIC API\r\n\t */\r\n\tpublic getModelName<T>(model: T | any) {\r\n\t\tif (model && model.name) {\r\n\t\t\treturn model.name;\r\n\t\t} else {\r\n\t\t\treturn model;\r\n\t\t}\r\n\t}\r\n\r\n\t// SAVE\r\n\tsave<T>(model: T | any, objToSave?: T | any | T[] | any[]): Observable<T | T[]> {\r\n\t\tif (!model) return of();\r\n\t\telse return this.DSV.save(model, objToSave);\r\n\t}\r\n\r\n\t// READ\r\n\tread<T>(model: T | any, query?: HttpParams | string | any): Observable<T[]> {\r\n\t\tif (!model) return of();\r\n\t\telse return this.DR.read(model, query);\r\n\t}\r\n\r\n\treadExternal(url): Promise<any> {\r\n\t\treturn this.DR.readExternal(url);\r\n\t}\r\n\r\n\t// DELETE\r\n\tdelete<T>(model: T | any, objToDelete: T | any): Observable<T | T[]> {\r\n\t\tif (!model) return of();\r\n\t\treturn this.DD.delete(model, objToDelete);\r\n\t}\r\n\r\n\t// SELECTORS\r\n\tselectAll<T>(model: T | any): Observable<T[]> {\r\n\t\treturn this.subjectMap[this.getModelName(model)];\r\n\t}\r\n\r\n\tselectAllValues<T>(model: T | any): T[] {\r\n\t\treturn this.cache[this.getModelName(model)];\r\n\t}\r\n\r\n\tselectAllFilter<T>(model: T | any, filterProp: string, filterValue: string): T[] {\r\n\t\treturn this.selectAllValues<T>(model).filter(\r\n\t\t\t(entity) => entity[filterProp] === filterValue\r\n\t\t);\r\n\t}\r\n\r\n\tselectOne<T>(model: T | any, id: string): Observable<T> {\r\n\t\treturn of(this.selectOneValue(model, id));\r\n\t}\r\n\r\n\tselectOneValue<T>(model: T | any, id: any | string): T {\r\n\t\treturn this.cache[this.getModelName(model)].find((entity) => entity.id === id);\r\n\t}\r\n\r\n\tsetActive<T>(model: T | any, entity?: any | string) {\r\n\t\tif (!entity) {\r\n\t\t\tthis.activeMap[this.getModelName(model)] = null;\r\n\t\t} else {\r\n\t\t\tthis.activeMap[this.getModelName(model)] = this.selectOneValue(\r\n\t\t\t\tmodel,\r\n\t\t\t\tentity.id ? entity.id : entity\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\tselectActive<T>(model: T | any): T {\r\n\t\treturn this.activeMap[this.getModelName(model)];\r\n\t}\r\n\r\n\tsaveActive<T>(model: T | any): Observable<T | T[]> {\r\n\t\treturn this.save(model, this.selectActive(model));\r\n\t}\r\n\r\n\tdeleteActive<T>(model: T | any) {\r\n\t\treturn this.delete(model, this.selectActive(model)).pipe(\r\n\t\t\ttap((entity) => this.setActive(model, null))\r\n\t\t);\r\n\t}\r\n}\r\n\r\n/**\r\n * A simple cache that stores all recent entities for a table\r\n */\r\ninterface CacheMap {\r\n\t[tableName: string]: any[];\r\n}\r\n\r\n/**\r\n * A mapping of every environment defined DB table to a subject so that CRUD applications can send notifications to all subject subscribers\r\n */\r\ninterface SubjectMap {\r\n\t[tableName: string]: Subject<any>;\r\n}\r\n\r\n/**\r\n * A mapping of a currently selected entity for each table\r\n */\r\ninterface ActiveMap {\r\n\t[tableName: string]: any;\r\n}\r\n\r\n/**\r\n * A mapping of every DB table to a load boolean so that external components can wait for a table's data to be loaded\r\n */\r\ninterface LoadingMap {\r\n\t[tableName: string]: BehaviorSubject<boolean>;\r\n}\r\n\r\n/**\r\n * A simple cache which is an object whose properties is a table name with an array of that table's data loaded into the front end\r\n */\r\ninterface Cache {\r\n\t[tableName: string]: any[];\r\n}\r\n\r\n/**\r\n * An interface for what we expect to be used for dynamic Table CRUD\r\n */\r\ninterface TableCRUD {\r\n\tcache: Cache;\r\n\tsubjectMap: SubjectMap;\r\n\tloadingMap: LoadingMap;\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\n\r\nexport class GenericModelHttpParams extends HttpParams {\r\n    constructor(public model: any) {\r\n        super();\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor, HttpHandler, HttpRequest\r\n} from '@angular/common/http';\r\n\r\n@Injectable()\r\nexport class DataServiceHeaderInterceptor implements HttpInterceptor {\r\n\r\n  constructor() {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n    // Clone the request and set the new header in one step.\r\n    // const dsReq = req.clone({ setHeaders: { 'Content-Type': `application/json` } });\r\n\r\n    // send cloned request with header to the next handler.\r\n    return next.handle(req);\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler } from '@angular/common/http';\r\nimport { DataService } from '../data.service';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { GenericModelHttpParams } from './GenericModelHttpParams';\r\n\r\n@Injectable()\r\nexport class LoadingInterceptor implements HttpInterceptor {\r\n    constructor(private DS: DataService) {}\r\n    \r\n    intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n        let model: any;\r\n        \r\n        if (req.params instanceof GenericModelHttpParams) model = req.params.model;\r\n        \r\n        if (model) {\r\n            this.DS.loadingMap[this.DS.getModelName(model)].next(true);\r\n        }\r\n        \r\n        return next.handle(req)\r\n            .pipe(\r\n                finalize(() => {\r\n                    if (model) {\r\n                        this.DS.loadingMap[this.DS.getModelName(model)].next(false);\r\n                    }\r\n                })\r\n            );\r\n    }\r\n}","module.exports = require(\"@angular/common\");","module.exports = require(\"@angular/common/http\");","module.exports = require(\"@angular/core\");","module.exports = require(\"bcryptjs\");","module.exports = require(\"body-parser\");","module.exports = require(\"class-validator\");","module.exports = require(\"compression\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"helmet\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"reflect-metadata\");","module.exports = require(\"rxjs\");","module.exports = require(\"rxjs/operators\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");"],"sourceRoot":""}